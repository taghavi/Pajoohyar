<?xml version="1.0"?>
<!--
    ***** BEGIN LICENSE BLOCK *****
    
    Copyright Â© 2009 Center for History and New Media
                     George Mason University, Fairfax, Virginia, USA
                     http://zotero.org
    
    This file is part of Zotero.
    
    Zotero is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.
    
    Zotero is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.
    
    You should have received a copy of the GNU Affero General Public License
    along with Zotero.  If not, see <http://www.gnu.org/licenses/>.
    
    ***** END LICENSE BLOCK *****
-->
<?xml-stylesheet href="chrome://global/skin/global.css"?>
<?xml-stylesheet href="chrome://zotero/skin/zotero.css" type="text/css"?>

<window
	id="csl-edit"
	xmlns="http://www.mozilla.org/keymaster/gatekeeper/there.is.only.xul"
	onload="Zotero_CSL_Editor.init();"
	title="Zotero Reference Test pane">
	
	<script src="chrome://zotero/content/include.js"/>
	
	<script>
	<![CDATA[
		var Zotero_CSL_Editor = new function() {
			var mainWindow = window.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
				.getInterface(Components.interfaces.nsIWebNavigation)
				.QueryInterface(Components.interfaces.nsIDocShellTreeItem)
				.rootTreeItem
				.QueryInterface(Components.interfaces.nsIInterfaceRequestor)
				.getInterface(Components.interfaces.nsIDOMWindow);
			
			this.init = init;
			this.handleKeyPress = handleKeyPress;
			this.loadCSL = loadCSL;
			this.generateBibliography = generateBibliography;
			this.refresh = refresh;
			
			function init() {
				var cslList = document.getElementById('zotero-csl-list');
				if (cslList.getAttribute('initialized') == 'true') {
					return;
				}
				
				var styles = Zotero.Styles.getAll();
				for each(var style in styles) {
					if (style.source) {
						continue;
					}
					var item = cslList.appendItem(style.title, style.styleID);
				}
				var pageList = document.getElementById('zotero-csl-page-type');
				var locators = Zotero.Cite.labels;
				for each(var type in locators) {
					var locator = type;
					locator = locator[0].toUpperCase()+locator.substr(1);
					pageList.appendItem(locator, type);
				}
				
				pageList.selectedIndex = 0;
				cslList.setAttribute('initialized', true)
			}
			function refresh() {
				var editor = document.getElementById('zotero-csl-editor')
				generateBibliography(editor.value);

			}
			
			function handleKeyPress(event) {
				if (event.keyCode == 9 &&
						(!event.shiftKey && !event.metaKey && !event.altKey && !event.ctrlKey)) {
					_insertText("\t");
					event.preventDefault();
				}
			}
			
			
			function loadCSL(cslID) {
				var editor = document.getElementById('zotero-csl-editor')
				var style = Zotero.Styles.get(cslID);
				editor.value = Zotero.File.getContents(style.file);
				editor.cslID = cslID;
				editor.doCommand();
				document.getElementById('zotero-csl-list').value = cslID;
			}
			
			
			function generateBibliography(str) {
				var editor = document.getElementById('zotero-csl-editor')
				var iframe = document.getElementById('zotero-csl-preview-box');
				
				var items = mainWindow.ZoteroPane.getSelectedItems();
				if (items.length == 0) {
					iframe.contentDocument.documentElement.innerHTML = '<html><head><title></title></head><body><p style="color: red">No references selected in Zotero.</p></body></html>';
					return;
				}
				var styleObject, styleEngine;
				if (str.indexOf("<defaults") != -1) {
					iframe.contentDocument.documentElement.innerHTML = 
						'<div>'
						+ "Old-style CSLs are no longer supported."
						+ '</div>';
					return;
				}
				else {
					try {
						styleObject = new Zotero.Style(str);
						styleEngine = styleObject.csl;
					} catch(e) {
						iframe.contentDocument.documentElement.innerHTML = '<div>Error parsing '+
							'style: </div><div>'+e+'</div>';
						throw e;
					}
				}
				
				var itemIds = [items[i].id for (i in items)];

				styleEngine.updateItems(itemIds);

				// Generate multiple citations
				var citation = {};
				citation.citationItems = [];
				citation.properties = {};
				citation.properties.noteIndex = 1;
				for (var i = 0, ilen = items.length; i < ilen; i += 1) {
					citation.citationItems.push({id:itemIds[i]});
				}

				// Generate single citations
				var author = document.getElementById("preview-suppress-author").checked;
				var search = document.getElementById('preview-pages');
				var loc = document.getElementById('zotero-csl-page-type');
				var pos = document.getElementById('zotero-ref-position').selectedItem.value;
				var citations = '<h1>Single Citations</h1>';
				for (var i=0; i<citation.citationItems.length; i++) {
					citation.citationItems[i]['suppress-author'] = author;
					if (search.value != '') {
						citation.citationItems[i].locator = search.value;
						citation.citationItems[i].label = loc.selectedItem.value;
					}
					citation.citationItems[i].position = parseInt(pos, 10);
					var subcitation = [citation.citationItems[i]];
					citations += styleEngine.makeCitationCluster(subcitation) + '<br />';
				}
				
				try {
					var multCitations = '<hr><h1>Multi Citations <span style="font-size:smaller;">(all with position "first")</span></h1>' +
						styleEngine.previewCitationCluster(citation, [], [], "html");
	
					// Generate bibliography
					styleEngine.updateItems(itemIds);
					var bibliography = '<hr/><h1>Bibliography</h1>' + 
						Zotero.Cite.makeFormattedBibliography(styleEngine, "html");
	
					iframe.contentDocument.documentElement.innerHTML = 
						'<div style="white-space: pre-wrap">'
						+ citations + multCitations + bibliography
						+ '</div>';
				} catch(e) {
						iframe.contentDocument.documentElement.innerHTML = '<div>Error generating citations '+
							'and bibliography: </div><div>'+e+'</div>';
						throw e;
				}
			}
			
			
			// From http://kb.mozillazine.org/Inserting_text_at_cursor
			function _insertText(text) {
				var command = "cmd_insertText";
				var controller = document.commandDispatcher.getControllerForCommand(command);
				if (controller && controller.isCommandEnabled(command)) {
					controller = controller.QueryInterface(Components.interfaces.nsICommandController);
					var params = Components.classes["@mozilla.org/embedcomp/command-params;1"];
					params = params.createInstance(Components.interfaces.nsICommandParams);
					params.setStringValue("state_data", "\t");
					controller.doCommandWithParams(command, params);
				}
			}
		}
	]]>
	</script>
	
	<vbox flex="1">
		<hbox align="center">
		    <button id="preview-refresh-button" label="Refresh" oncommand="Zotero_CSL_Editor.refresh()"/>
		    <menulist id="zotero-csl-page-type" style="min-height: 1.6em; min-width: 50px" oncommand="Zotero_CSL_Editor.refresh()" />
		    <label value=":" />
		    <textbox size="5" id="preview-pages" type="timed" timeout="250" oncommand="Zotero_CSL_Editor.refresh()"/>
		    <checkbox oncommand="Zotero_CSL_Editor.refresh()" id="preview-suppress-author" label="Suppress author" />
		    <label value="Citation is:" />
		    <menulist id="zotero-ref-position" oncommand="Zotero_CSL_Editor.refresh()">
		    	<menupopup>
		    	    <menuitem label="First" value="0"/>
		    	    <menuitem label="Subsequent" value="1"/>
		    	    <menuitem label="Ibid" value="2"/>
		    	    <menuitem label="Ibid+Locator" value="3"/>
		    	</menupopup>
		    </menulist>
		    <menulist id="zotero-csl-list" style="min-height: 1.6em; min-width: 100px" initialized="false" flex="1" oncommand="Zotero_CSL_Editor.loadCSL(this.selectedItem.value)"/>
		</hbox>
		<textbox id="zotero-csl-editor" type="timed" timeout="250" multiline="true"
			flex="1"
			onkeypress="Zotero_CSL_Editor.handleKeyPress(event)"
			oncommand="document.getElementById('zotero-csl-list').selectedIndex = -1; Zotero_CSL_Editor.generateBibliography(this.value)"/>
		<splitter/>
		<iframe id="zotero-csl-preview-box" flex="1" style="padding: 0 1em;background:white" overflow="auto" type="content"/>
	</vbox>
	
</window>
